#! /usr/bin/env python

import os, re, sys

mock_folder = os.path.dirname(os.path.abspath(__file__))
mock_file = 'mock.cpp'
mock_header = 'mock.h'
# test_file = 'test.cpp'
fnlist_file_name = 'mock.csv'

comment_pat = re.compile(r'/\*[^*]*\*/')
mock_pat_template = r'^\s*mock\s*\([^,]*,\s*[^,]*,\s*%s\s*,\s*\(.*?\)\s*(?=mock|$)'
name_pat = re.compile(r'(.*?)([a-zA-Z_][a-zA-Z_0-9:]*)\s*(\(.*)')

def squeeze(x):
    x = re.sub('\s+', ' ', x)
    while x.find('  ') > -1:
        x = x.replace('  ', ' ')
    x = x.strip()
    x = comment_pat.sub('', x)
    x = re.sub(r'\s+\(', '(', x)
    x = re.sub(r'\(\s+', '(', x)
    x = re.sub(r'\s+\)', ')', x)
    x = re.sub(r'\)\s+', ')', x)
    return x

# >> ON_CALL(*this, lock_queue(_, _, _, _)).WillByDefault(Return(PBSE_NONE));
def decl_default_val(file, fn_name, param_num, defval):
	file.write("        ON_CALL(*this, " + fn_name + "(")
	if param_num:
		for i in range(param_num-1):
			file.write("_, ")
		file.write("_")
	file.write(")).WillByDefault(Return(" + defval + "));\n")

# >> int fn_b(int x) { return g_mock->fn_b(x);}
def decl_fnunc_stub(file, fn_type, fn_name, params):

	for i in range(len(param_name)):
		file.write(fn_type + " " + fn_name + "(");

		if len(params):
			file.write(param[0] + " " + param[1])
			for param in params[1:]:
				file.write(", " + param[0] + " " + param[1]) 

		file.write(") { return g_mock->" + fn_name + "(")
		if len(params):
			file.write((params[0])[1])
			for param in params[1:]:
				file.write(", " + param[1]) 
		file.write(");}\n");

def get_return_type(proto):
	m = name_pat.match(proto)
	if m:
        	return squeeze(m.group(1))
	return ""                       

def get_fnname(proto):
	m = name_pat.match(proto)
	if m:
		return(m.group(2))
	return ("")

def get_params(proto):	
	m = name_pat.match(proto)
	if m:
		return squeeze(m.group(3))[1:-1]
	return ("")

def get_params_list(proto):
	params = []
	params_list = get_params(proto).split(",")
	for p in params_list:
		pp = p.split(" ")
		type = pp[0:-1]
		name = pp[-1]	
		params.append([type, name])
	return params	

def get_param_num(proto):
	return len(get_params(proto).split(","))

def generate_mock():
    headers = []
    protos = []
    defvals = []
    with open(fnlist_file_name, 'a') as f:
        print ""
    with open(fnlist_file_name, 'r') as fnlist_file:
	lines = fnlist_file.readlines()
	for line in lines:
		if line[:1] != '#':
			params_list = line.split(";")
			if len(params_list) >= 3:
				protos.append(squeeze(params_list[0]))
				headers.append(params_list[1])
				defvals.append(params_list[2])

    if len(protos):
      with open(mock_file, 'w') as f_mock:
        with open(mock_header, 'w') as f_mock_h:
                f_mock.write('// Generated by mock_gen\n')            
                f_mock.write('#include "mock.h"\n')
                
                f_mock_h.write('// Generated by mock_gen\n')
                f_mock_h.write('#include <gmock/gmock.h>\n')
                for _header in set(headers):
                  if _header:
                    f_mock_h.write('#include "%s"\n' % (_header))

		f_mock_h.write('\nusing ::testing::Return;\n')
		f_mock_h.write('using ::testing::_;\n\n')
                                                    
                f_mock_h.write('\nclass c_mock\n{\npublic:\n')
		f_mock_h.write('    c_mock() {\n')

                for proto_n in range(len(protos)):
			if defvals[proto_n]:
				decl_default_val(f_mock_h, get_fnname(protos[proto_n]), get_param_num(protos[proto_n]), defvals[proto_n])

		f_mock_h.write('    }\n\n')
                
                f_mock.write('\n// Add extern varables here\n\n')            
                f_mock.write('\nextern c_mock *g_mock;\n\n')

		for proto_ in protos:
			f_mock.write('%s %s(%s) { return g_mock->%s(' % (get_return_type(proto_), get_fnname(proto_), get_params(proto_), get_fnname(proto_)))
			param_str = ""
			for param in get_params_list(proto_):
				param_str += param[1] + ", "
			f_mock.write(param_str[:-2] + ');}\n')
			f_mock_h.write('    MOCK_METHOD%i(%s, %s(%s));\n' % (get_param_num(proto_), get_fnname(proto_), get_return_type(proto_), get_params(proto_)))                                              
                 
                f_mock_h.write('};\n')   
                
def fnlist_find(proto):
	with open(fnlist_file_name, 'a') as f:
		print ""
	with open(fnlist_file_name, 'r') as fnlist_file:
		lines = fnlist_file.readlines()
		for line in lines:
			if line[:1] != '#':
				params_list = line.split(";")
				if squeeze(params_list[0]) == proto:
					return 1
	return 0

def fnlist_add(proto, header, def_value):

	if def_value:
		print 'Add prototype %s (#include "%s") with default value %s.' % (proto, header, def_value)
	else:
		print 'Add prototype %s (#include "%s") without default value.' % (proto, header)

	with open(fnlist_file_name, 'a') as fnlist_file:
		if proto[-1:] == ';' or proto[-1:] == '{':
			fnlist_file.write(proto[:-1])
		else:
			fnlist_file.write(proto)
		fnlist_file.write(';%s;%s;\n' % (header, def_value))
	return

if __name__ == '__main__':	
    def_value = ""
    header = ""
    proto = ""
    flag_gen = 0
    if len(sys.argv[1:]) == 0:
	sys.argv.append("-h")
    for key in sys.argv[1:]:
        if (key == '--help' or key == '-h'):
            print('mock [--help|-h] [-g] [-f\"function_prototype\" -i\"header_name\" [-d"default_value"]]')
	    print('   --help, -h - print help page')
	    print('   -g - generatr source')
	    print('   -f\"function_prototype\" - function prototype')
	    print('   -i\"header_name\" - header file name')
	    print('   -d"default_value" - function default return value')
            sys.exit(0)            
        elif (key[:2] == '-f'):
            if key.endswith(';') or key.endswith('{'):
	        proto = (squeeze(key[2:])[0:-1])
	    else:
	        proto = (squeeze(key[2:]))
        elif (key[:2] == '-i'):
            header = key[2:]
        elif (key[:2] == '-d'):
            def_value = key[2:]
        elif (key[:2] == '-g'):
            flag_gen = 1

    if proto:
      if fnlist_find(proto):
    	print "Prorotype %s already exist\n" % (proto)
      else:
	fnlist_add(proto, header, def_value)
	flag_gen = 1

    if flag_gen:
	print "Generate source..."
	generate_mock()	
	print "Done."